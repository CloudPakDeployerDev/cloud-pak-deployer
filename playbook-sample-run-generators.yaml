---
- name: Maintain Management Environment
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    terraform_work_folder: "TEMP_TERRAFORM"
    definition_name: client
    sample_provision_ssh: some_very_long_string

  tasks:
  - name: handle terraform files and its folder
    block:
    # - name: check for .terraform directory
    #   stat:
    #     path: "{{playbook_dir}}/scrap/{{terraform_work_folder}}/.terraform"
    #   register: dot_terraform_dir
    - name: ensure the environment-backup folder exists
      file:
        path: "{{playbook_dir}}/terraform_temp/{{definition_name}}"
        state: directory
    - name: save the .terraform directory
      shell: 
        cmd: "mv {{playbook_dir}}/scrap/{{terraform_work_folder}}/.terraform {{playbook_dir}}/terraform_temp/{{definition_name}}"
        removes: "{{playbook_dir}}/scrap/{{terraform_work_folder}}/.terraform"
    - name: save the .terraform.lock.hcl file
      shell: 
        cmd: "mv {{playbook_dir}}/scrap/{{terraform_work_folder}}/.terraform.lock.hcl {{playbook_dir}}/terraform_temp/{{definition_name}}/.terraform.lock.hcl"
        removes: "{{playbook_dir}}/scrap/{{terraform_work_folder}}/.terraform.lock.hcl"
    
    - name: save the statefile
      copy: 
        src: "{{playbook_dir}}/scrap/{{terraform_work_folder}}/terraform.tfstate"
        dest: "{{playbook_dir}}/terraform_temp/{{definition_name}}/terraform.tfstate"
    - name: purge terraform work folder
      file:
        path: "{{playbook_dir}}/scrap/{{terraform_work_folder}}"
        state: absent
    - name: create terraform work folder again
      file:
        path: "{{playbook_dir}}/scrap/{{terraform_work_folder}}"
        state: directory
    - name: copy statefile back
      copy:
        src: "{{playbook_dir}}/terraform_temp/{{definition_name}}/terraform.tfstate"
        dest: "{{playbook_dir}}/scrap/{{terraform_work_folder}}/terraform.tfstate"
    - name: move the .terraform directory back
      shell: 
        cmd:  "mv {{playbook_dir}}/terraform_temp/{{definition_name}}/.terraform {{playbook_dir}}/scrap/{{terraform_work_folder}}"
        removes: "{{playbook_dir}}/terraform_temp/{{definition_name}}/.terraform"
    - name: move the .terraform.lock.hcl file back
      shell: 
        cmd:  "mv {{playbook_dir}}/terraform_temp/{{definition_name}}/.terraform.lock.hcl {{playbook_dir}}/scrap/{{terraform_work_folder}}/.terraform.lock.hcl"
        removes: "{{playbook_dir}}/terraform_temp/{{definition_name}}/.terraform.lock.hcl"

  - name: ensure the ssh-key folder exists
    file:
      path: "{{playbook_dir}}/scrap/keys"
      state: directory
  - name: generate a deployment ssh key
    community.crypto.openssh_keypair:
      path: "{{playbook_dir}}/scrap/keys/id_provisionssh_rsa"
  - name: 
    set_fact:
      sample_provision_ssh: "{{ lookup('file', './scrap/keys/id_provisionssh_rsa.pub') }}"

  - name: "Include 'generators'-role and pass variables to it"
    include_role:
      name: generators
    vars:
      path_to_config_folder: "{{playbook_dir}}/sample-generators/generator_config"
      path_to_definitions_folder: "{{playbook_dir}}/sample-generators/environment_definitions"
      path_to_terraform_folder: "{{playbook_dir}}/scrap/{{terraform_work_folder}}"
  
  - name: "add the 'provider.auto.tfvars' to the terraform-workdir"
    copy:
      src: "{{playbook_dir}}/scrap/provider.auto.tfvars.j2"
      dest: "{{playbook_dir}}/scrap/{{terraform_work_folder}}/provider.auto.tfvars"

  
  # roles:
  # - role: preprocess_management
  #   vars:
  #     input_dir: 'provision-configuration/environment_{{target_env}}'
  #     terraform_main_file: '{{playbook_dir}}/{{terraform_work_folder}}/main.tf.json'
  # tasks:


  # - name: Copy statefile to the terraform_work_folder directory
  #   copy:
  #     src: "{{playbook_dir}}/terraform_state/{{target_env}}/"
  #     dest: "{{playbook_dir}}/{{terraform_work_folder}}"
  #   when: statefile_details.stat.exists
  
  # - name: Run terraform init in terraform_temp
  #   shell: 
  #     chdir: '{{playbook_dir}}/{{terraform_work_folder}}'
  #     #cmd: 'bash -c "terraform init" 2>&1 >> apply.log'
  #     cmd: 'terraform init'
  
  # - name: Run terraform plan in terraform_temp 
  #   shell: 
  #     chdir: '{{playbook_dir}}/{{terraform_work_folder}}'
  #     cmd: bash -c "terraform plan 2>&1 >> apply.log"