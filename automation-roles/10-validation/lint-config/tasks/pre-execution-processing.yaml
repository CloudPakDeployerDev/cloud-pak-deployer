---
- name: Get generator to be used for platform {{ cloud_platform }}
  include_tasks: get-generator-dir.yaml

- name: Check if the preprocessor.py file exists
  stat:
    path: "{{ _generator_dir }}/{{ GENERATOR_NAME }}/preprocessor.py"
  register: preprocessorscript_stat

- set_fact:
    generator_element_index: 0
  when: generator.name != generator_last_name

- name: Show item that is being processed
  debug:
    msg: |
      {{ generator.this_item }}
      item_index:{{ all_config_item_index }} 
      generator_element_index:{{ generator_element_index }}
      {{ generator.name }} -- {{ generator_last_name }}

- name: If a preprocessor script was found, run it via pre-execution-processor.py
  block:
  - name: Run the preprocess script for generator {{ generator.name }}
    shell:
      cmd: "python3 pre-execution-processor.py -k {{ generator.name }} -p {{ _generator_dir }}/{{ GENERATOR_NAME }} -i {{ generator_element_index }} -s preprocessor.py -a {{generator.attributes | to_yaml | b64encode }} -f {{generator.config | to_yaml | b64encode }}"
      #cmd: "pwd"
      chdir: "{{ role_path }}/scripts"
    register: preprocess_result # in the old version this was called 'validator_result'

# The output of the script should look like:
# {
#   'errors': [
#     {
#       'path': 
#       'attributeValue': 
#       'message': 
#     }
#   ]
# }


  - name: Show pre-processor results
    debug:
      var: preprocess_result

  - name: 
    set_fact:
      validator_received_result: "{{ preprocess_result.stdout | from_json}}"

  - name: Show results from validator
    debug:
      var: validator_received_result

  - name: Create a new error (to trigger the reporting)
    set_fact:
      generator_validator_error: ""

  - name: Add error header if errors were found
    set_fact:
      generator_validator_error: |
        {{generator_validator_error}}

        {{ generator.name }}:
        {{ generator.attributes | to_nice_yaml }}
    when: validator_received_result['errors'] is defined and (validator_received_result['errors']|length>0)


  - name: Add errors from generator
    set_fact:
      generator_validation_error_count: "{{ (generator_validation_error_count | int) + 1 }}"
      generator_validator_error: |-
        {{generator_validator_error}}
        ERROR: {{ error_item.message }}
    loop: "{{ validator_received_result.errors }}"
    loop_control:
      loop_var: error_item

  - set_fact:
      generator_validation_error_message: |
        {{ generator_validation_error_message }}
        {{ generator_validator_error }}
  # update the global all_config dict
  - set_fact:
      all_config: "{{ validator_received_result.get('updated_config') }}"
  when: preprocessorscript_stat.stat.exists==true
  
- name: Show all configuration
  debug:
    var: all_config

### end of loop, prepare next iteration
- set_fact:
    generator_last_name: "{{ generator.name }}"
    generator_element_index: "{{ (generator_element_index | int)  + 1 }}"
