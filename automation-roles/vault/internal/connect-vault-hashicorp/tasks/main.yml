---

- name: Validate mandatory variables are defined
  assert:
    that:
      - hashicorp_vault_address is defined
      - hashicorp_vault_login_token is defined

- name: Validate if valid login session is available
  shell: "vault secrets list -address {{ hashicorp_vault_address }}"
  ignore_errors: yes
  register: hashicorp_vault_list_result


- debug:
    msg: "Login to {{ hashicorp_vault_address }} already available, skip login..."
  when: "hashicorp_vault_list_result.rc == 0"

- name: Login to Hashicorp Vault if vault list failed
  block:

    #- name: Login to vault {{ hashicorp_vault_address }} using certificate
    #  shell: |
    #     vault login \
    #       -method=cert \
    #       -ca-cert={{ hashicorp_vault_ca_certificate }} \
    #       -client-cert={{ hashicorp_vault_client_certificate_file }} \
    #       -client-key={{ hashicorp_vault_client_certificate_key }} \
    #       -address={{ hashicorp_vault_address }}
    #  register: vault_login_result
    #  failed_when: "not vault_login_result.rc == '0'"

    - name: Login to vault {{ hashicorp_vault_address }} using token
      shell: |
         vault login \
         -address {{ hashicorp_vault_address }} \
           {{ hashicorp_vault_login_token }} 
      register: hashicorp_vault_login_result
      failed_when: "not hashicorp_vault_login_result.rc == 0"

    - name: Test connection to vault
      shell: "vault secrets list"
      register: hashicorp_vault_list_after_login_result
      failed_when: "not hashicorp_vault_list_after_login_result.rc == 0"

    - debug:
        msg: "{{ vault_login_result }}"

  when: "not hashicorp_vault_list_result.rc == 0"

- debug:
    msg: "Successfully logged into {{ hashicorp_vault_address }}"