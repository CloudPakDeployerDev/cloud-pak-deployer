---
- name: Include default variables.
  include_vars: "main.yml"
- name: set facts based on defaults
  set_fact:
    "{{ item[8:] }}": "{{ lookup('vars', item) }}"
  when:
    - item is match("^default_")
    - vars[item[8:]] is not defined
  with_items:
    "{{ vars | list }}"
- name: Create logging directory if it does not exist
  file:
    path: "{{status_dir}}/log"
    state: directory

- name: Create temporary terraform directory if it does not exist
  file:
    path: "{{status_dir}}/terraform"
    state: directory

# - name: get public VLAN ids from softlayer-api
#   uri:
#     url: https://api.softlayer.com/rest/v3.1/SoftLayer_Account/getAvailablePublicNetworkVlans.json
#     return_content: yes
#     user: "{{ iaas_classic_username }}"
#     password: "{{ iaas_classic_api_key }}"
#     method: GET
#     force_basic_auth: yes
#     status_code: 200
#   register: response_getPublicNeworkVlans

- name: get public Subnets ids from softlayer-api
  uri:
    url: https://api.softlayer.com/rest/v3.1/SoftLayer_Account/getPublicSubnets.json?objectMask=mask[networkVlan,datacenter]
    return_content: yes
    user: "{{ iaas_classic_username }}"
    password: "{{ iaas_classic_api_key }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
  register: response_getPublicNetworkSubnets

- debug: var=response_getPublicNetworkSubnets

# - name: get private VLAN ids from softlayer-api
#   uri:
#     url: https://api.softlayer.com/rest/v3.1/SoftLayer_Account/getPrivateNetworkVlans.json?objectMask=mask[id,type,subnets,subnets.datacenter]
#     return_content: yes
#     user: "{{ iaas_classic_username }}"
#     password: "{{ iaas_classic_api_key }}"
#     method: GET
#     force_basic_auth: yes
#     status_code: 200
#   register: response_getPrivateNeworkVlans

- name: get private Subnet ids from softlayer-api
  uri:
    url: https://api.softlayer.com/rest/v3.1/SoftLayer_Account/getPrivateSubnets.json?objectMask=mask[networkVlan,datacenter]
    return_content: yes
    user: "{{ iaas_classic_username }}"
    password: "{{ iaas_classic_api_key }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
  register: response_getPrivateNetworkSubnets

- debug: var=response_getPrivateNetworkSubnets

- name: construct the querystring to filter the list of secrets
  set_fact:
    #vlan_query: "[? name=='{{ secret_name }}'].{id: id,type:secret_type}"
    vlan_query: "[?datacenter.name=='{{ classic_datacenter }}']"

- set_fact:
    response_getPrivateNetworkSubnets_filtered: "{{ (response_getPrivateNetworkSubnets.json | json_query(vlan_query) ) }}"
    response_getPublicNetworkSubnets_filtered:  "{{ (response_getPublicNetworkSubnets.json | json_query(vlan_query) ) }}"

- debug: var=response_getPrivateNetworkSubnets_filtered
- debug: var=response_getPublicNetworkSubnets_filtered

# - name: Save public and private vlans in iaas_vlans
#   set_fact:
#     iaas_vlans:
#       private: "{{ response_getPrivateNeworkVlans.json[0] }}" 
#       public: "{{ response_getPublicNeworkVlans.json[0] }}"

- name: Save public and private vlans in iaas_vlans
  set_fact:
    iaas_vlans:
      private: "{{ response_getPrivateNetworkSubnets_filtered[0].networkVlan }}" 
      public: "{{ response_getPublicNetworkSubnets_filtered[0].networkVlan }}"

- name: Create temporary terraform directory if it does not exist
  file:
    path: "{{status_dir}}/terraform"
    state: directory

- name: Write the provider.tf file
  template:
    src: provider-roks.tf.j2
    dest: "{{status_dir}}/terraform/provider.tf"

- name: Write the main.tf file
  template:
    src: main-roks.tf.j2
    dest: "{{status_dir}}/terraform/main.tf"

- name: Init terraform via shell if .terraform directory doesn't exist
  shell: |
    runtfinit () { \
      terraform init |& tee -a {{status_dir}}/log/terraform_init.log; \
      return "${PIPESTATUS[0]}"; \
    }; \
    runtfinit
  args:
    chdir: "{{status_dir}}/terraform"
    creates: "{{status_dir}}/terraform/.terraform"

- debug: 
    msg: "Executing: terraform apply -var 'ibmcloud_api_key={{ibmcloud_api_key}}' -var 'iaas_classic_username={{iaas_classic_username}}' -var 'iaas_classic_api_key={{iaas_classic_api_key}}'"

- name: Run terraform apply via shell
  shell: |
    runtfapply () { \
      terraform apply \
        -var ibmcloud_api_key="{{ibmcloud_api_key}}" \
        -var iaas_classic_username="{{iaas_classic_username}}" \
        -var iaas_classic_api_key="{{iaas_classic_api_key}}" \
        -auto-approve |& tee -a {{status_dir}}/log/terraform_apply.log; \
      return "${PIPESTATUS[0]}"; \
    }; \
    runtfapply    
  args:
    chdir: "{{status_dir}}/terraform"


### TODO: handle Terraform state
#- name: execute Terraform
# - name: Run Terraform
#   community.general.terraform:
#     project_path: "{{status_dir}}/terraform"
#     variables:
#       ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#       iaas_classic_username: "{{ iaas_classic_username }}"
#       iaas_classic_api_key: "{{ iaas_classic_api_key }}"
#   register: terraform_output
# - name: Show terraform-output
#   debug: 
#     msg: "{{ terraform_output.outputs }}"
