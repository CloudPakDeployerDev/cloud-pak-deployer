---
- name: Validate mandatory variables are defined
  assert:
    that:
      - cloud_platform is defined

- name: Validate cloud_platform is implemented
  fail: msg="cloud_platform {{ cloud_platform }} is not implemented, current implemented cloud platforms are {{ implemented_cloud_platform_types }} "
  when: "cloud_platform not in implemented_cloud_platform_types"

# TODO: Reinstate ROKS Classic
# - name: OpenShift Terraform for IBM Cloud
#   block:
#     - name: Provision OpenShift on IBM Cloud Classic Infrastructure
#       include_role: 
#         name: ibmcloud-terraform-classic
#       when: all_config.roks[0].infrastructure.type == "classic"
#   when: "cloud_platform == 'ibm-cloud'"

- name: Provision IBM Cloud VPC Infrastructure
  block:

  - name: Generate or retrieve the SSH keys
    include: ibmcloud-vpc-ssh.yaml
    loop: "{{ all_config.ssh_keys }}"

  - name: "Include 'generators'-role and pass variables to it"
    include_role:
      name: generators
    vars:
      # path_to_config_dir: "{{ config_dir }}/config"
      path_to_config_dir: "{{ config_dir }}"
      path_to_generators_dir: "{{ generators_dir | default([(playbook_dir | dirname),'/automation-generators'] | join) }}"
      path_to_terraform_work_dir: "{{status_dir}}/terraform"

  - name: "Copy variables to Terraform directory {{status_dir}}/terraform"
    template:
      src: 'variables.auto.tfvars.j2'
      dest: '{{status_dir}}/terraform/variables.auto.tfvars'

  - name: Retrieve Terraform tfstate from the vault
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "{{ environment_name }}-terraform-tfstate"
      secret_group: "{{ environment_name }}"

  - name: Write {{ status_dir }}/terraform/terraform.tfstate file
    copy:
      content: "{{ secret_value }}"
      dest: "{{ status_dir }}/terraform/terraform.tfstate"
    when: "secret_value | trim | length > 0"

  - name: "Run terraform init in Terraform directory {{status_dir}}/terraform"
    shell: 
      chdir: '{{status_dir}}/terraform'
      cmd: 'terraform init'

  - name: "Run terraform plan in Terraform directory {{status_dir}}/terraform, check {{status_dir}}/terraform/plan.log"
    shell: 
      chdir: '{{status_dir}}/terraform'
      cmd: bash -c "terraform plan -no-color -detailed-exitcode 2>&1 >> plan.log"
    register: terraform_plan_result
    failed_when: "terraform_plan_result.rc == 1"

  # If there are no changes, terraform plan will return with exit code 2 (as per -detailed-exitcode)
  # Subsequent steps are skipped if no changes were planned
  - debug:
      msg: "No changes were detected in the planning phase, apply will be skipped and tfstate secret will not be updated"
    when: "terraform_plan_result.rc == 0"

  - slurp:
      src: "{{status_dir}}/terraform/plan.log"
    register: plan_log

  - set_fact:
      destroy_result: "{{ plan_log['content'] | b64decode | regex_search('([0-9]+) to destroy', '\\1') }}"

  - debug:
      var: destroy_result

  - set_fact:
      number_to_destroy: "{{ destroy_result | first }}"
    when: destroy_result != ''

  - debug:
      var: number_to_destroy
    when: number_to_destroy is defined

  - fail:
      msg: "Terraform will destroy artifacts and this was not confirmed"
    when:
      - number_to_destroy is defined
      - number_to_destroy != '0'
      - confirm_destroy | bool != True

  - name: "Run terraform apply in Terraform directory {{status_dir}}/terraform, check {{status_dir}}/terraform/apply.log"
    shell: 
      chdir: '{{status_dir}}/terraform'
      cmd: bash -c "terraform apply -auto-approve -no-color 2>&1 >> apply.log"
    environment:
      TF_LOG: "info"
      TF_LOG_PATH: "{{ status_dir }}/terraform/tf_apply.log"
    register: terraform_apply
    ignore_errors: yes
    when: terraform_plan_result.rc != 0

  - set_fact:
      tf_state_content: "{{ lookup('file', status_dir+'/terraform/terraform.tfstate') }}"
    when: terraform_plan_result.rc != 0

  - name: Store the terraform tfstate file as secret {{ environment_name }}-terraform-tfstate in group {{ environment_name }}
    include_role:
      name: vault-create-secret
    vars:
      secret_name: "{{ environment_name }}-terraform-tfstate"
      secret_group: "{{ environment_name }}"
      secret_payload: "{{ tf_state_content }}"
    when: 
    - terraform_plan_result.rc != 0
    - tf_state_content | length > 0

  - fail:
      msg: Error occurred during Terraform apply, state has been preserved. Failing now. Check the apply log for details.
    when: 
    - terraform_plan_result.rc == 2
    - terraform_apply.rc!=0

  when: "cloud_platform == 'ibm-cloud'"


