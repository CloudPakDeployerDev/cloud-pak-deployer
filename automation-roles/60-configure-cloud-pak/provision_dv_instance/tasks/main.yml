---
# tasks file for provision_dv_instance
- when: "not cp4d_dv_provision_data_virtualization_instance == true"
  block:
    - name: "Skip provision Data Virtualization instance"
      debug:
        msg: "Variable cp4d_dv_provision_instance set to {{ cp4d_dv_provision_data_virtualization_instance }}, ending play provision_dv_instance"

- when: "cp4d_dv_provision_data_virtualization_instance == true"
  block:

- set_fact:
    dv_cartridge: "{{ current_cp4d_cluster.cartridges|json_query(query_cartridge)|first }}"
  vars:
    cartridge_name: "dv"
    query_cartridge: "[?name=='{{ cartridge_name }}']"

- debug:
    var: dv_cartridge  

  - name: check if Data Virtualization is installed
    shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances?addon_type={{ cp4d_dv_type }}&addon_version={{ cp4d_dv_version }}'"
    register: dv_lookup_result

  - set_fact:
      dv_lookup: "{{ dv_lookup_result.stdout | from_json }}"

  - debug:
      msg: "Data Virtualization instance already exists in OpenShift project {{ current_cp4d_cluster.project }}, ending play provision_dv_instance"
    when: "not dv_lookup.total_count  == 0"

  - name: Create Data virtualization instance
    block:

      - tempfile:
          state: directory
        register: cp4d_automation_temp_dir

      - name: Create Data Virtualization configuration file
        template:
          src: dv_instance.json.j2
          dest: "{{ cp4d_automation_temp_dir.path }}/dv_instance.json"

      - name: Provision Data Virtualization
        shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X POST 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances' -T {{ cp4d_automation_temp_dir.path }}/dv_instance.json"
        register: provision_dv_result

      - debug:
          msg: "{{ provision_dv_result }}"

    when: dv_lookup.total_count == 0
