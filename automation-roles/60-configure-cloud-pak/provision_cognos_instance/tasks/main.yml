---
- when: "not cp4d_ca_provision_cognos_instance == true"
  block:
    - name: "Skip provision Cognos Analytics instance"
      debug:
        msg: "Variable cp4d_ca_provision_cognos_instance set to {{ cp4d_ca_provision_cognos_instance }}, ending play provision_cognos_instance"

- debug:
    var: current_cp4d_cartridge

- when: "cp4d_ca_provision_cognos_instance == true"
  block:

  - tempfile:
      state: directory
    register: cp4d_automation_temp_dir

  - name: Get Route to Cloud Pak for Data
    shell: "oc --namespace {{ current_cp4d_cluster.project }} get route {{ current_cp4d_cluster.project }}-cpd -o jsonpath=\"{.spec.host}\""
    register: cp4d_url

  - name: Login to Cloud Pak for Data
    shell: "curl -k -X POST -H 'cache-control: no-cache' -H 'Content-Type: application/json;charset=UTF-8' -d '{\"username\":\"{{ cp4d_login_username }}\",\"password\":\"{{ cp4d_login_password }}\"}' 'https://{{ cp4d_url.stdout }}/icp4d-api/v1/authorize'"
    register: cp4d_login_result

  - set_fact:
      cp4d_login: "{{ cp4d_login_result.stdout | from_json }}"

  - name: Check if the Cognos Analytics instance is already running
    shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances?addon_type={{ cp4d_cognos_instance_addon_type }}&addon_version={{ cp4d_cognos_instance_addon_version }}'"
    register: cognos_lookup_result

  - set_fact:
      cognos_lookup_result_json: "{{ cognos_lookup_result.stdout | from_json }}"

  - when: "not cognos_lookup_result_json.total_count == 0"
    block:
      - name: "Cognos Analytics instance already exists in OpenShift project {{ current_cp4d_cluster.project }}"
        debug:
          msg: "Cognos instance already exists in OpenShift project {{ current_cp4d_cluster.project }}, ending play provision_cognos_instance"

  - when: "cognos_lookup_result_json.total_count == 0"
    block:
    - debug:
        msg: "Using DB2 SAAS service {{ current_cp4d_cartridge.metastore_ref }} for Cognos Analytics Repository database"

    - name: Check availability of DB2 service instance {{ current_cp4d_cartridge.metastore_ref }}
      shell: "ibmcloud resource service-instance {{ current_cp4d_cartridge.metastore_ref }}"

    - name: Check availability of DB2 service key {{ current_cp4d_cartridge.metastore_ref }}-Credentials for service instance {{ current_cp4d_cartridge.metastore_ref }}
      shell: "ibmcloud resource service-keys --instance-name {{ current_cp4d_cartridge.metastore_ref }} | grep {{ current_cp4d_cartridge.metastore_ref }}-Credentials | wc -l"
      register: db2_service_key_lookup_result

    - when: "not db2_service_key_lookup_result.stdout == '0'"
      block:
        - name: "Skip provision Cognos Analytics instance"
          debug:
            msg: "The DB service instance {{ current_cp4d_cartridge.metastore_ref }} already contains DB2 service key {{ current_cp4d_cartridge.metastore_ref }}-Credentials. Ensure this database is not used by a different CA instance. Delete the DB2 service key and re-run."

    - when: "db2_service_key_lookup_result.stdout == '0'"
      block:
      - name: Create DB2 service key {{ cp4d_ca_db2_service_key_name }} if not available
        shell: "ibmcloud resource service-key-create {{ current_cp4d_cartridge.metastore_ref }}-Credentials --instance-name {{ current_cp4d_cartridge.metastore_ref }}"
        when: db2_service_key_lookup_result.stdout == "0"

      - name: Get DB2 service key {{ current_cp4d_service['cp4d_service']['service_name'] }}
        shell: "ibmcloud resource service-key {{ current_cp4d_cartridge.metastore_ref }}-Credentials --output json"
        register: db2_service_key_json

      #- debug:
      #    msg: "{{ db2_service_key_json }}"

      - template:
          src: cognos_service_credentials.json.j2
          dest: "{{ cp4d_automation_temp_dir.path }}/cognos_connection.json"
      - include_vars:
          file: "{{ cp4d_automation_temp_dir.path }}/cognos_connection.json"
          name: db2_service_key
      - debug:
          var: db2_service_key

      - name: Get the Catalog 'Platform assets catalog'
        shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/catalogs?entity.name={{ cp4d_all_assets_catalog_name }}'"
        register: cp4d_get_catalog_result

      - set_fact:
          cp4d_catalog: "{{ cp4d_get_catalog_result.stdout | from_json }}"

      - name: Validate if the connection to the Cognos DB2 Content Repository '{{ cp4d_cognos_connection_name }}' is available
        shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/connections?catalog_id={{ cp4d_catalog.catalogs[0].metadata.guid }}&entity.flags=personal_credentials&entity.name={{ cp4d_cognos_connection_name }}'"
        register: cp4d_cognos_db2_content_repo_result

      - debug:
          msg: "{{ cp4d_cognos_db2_content_repo_result }}"

      - set_fact:
          cp4d_cognos_db2_content_repo_json: "{{ cp4d_cognos_db2_content_repo_result.stdout | from_json }}"

      - set_fact:
          cp4d_cognos_db2_content_repo: "{{ cp4d_cognos_db2_content_repo_json.resources|json_query(query_db) }}"
        vars:
          db2_name: "{{ cp4d_cognos_connection_name }}"
          query_db: "[?entity.name=='{{ db2_name }}']"

      - debug:
          msg: "Number of datasources found with name {{ cp4d_cognos_connection_name }}: {{ cp4d_cognos_db2_content_repo|length }}"

      - name: Create Cognos Repository DB connection {{ cp4d_cognos_connection_name }} if it does not exist
        block:
          - name: Get the available connection types
            shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/v2/datasource_types'"
            register: cp4d_datasource_types_result

          - set_fact:
              cp4d_datasource_types: "{{ cp4d_datasource_types_result.stdout | from_json }}"

          - set_fact:
              cp4d_datasource_db2_type: "{{ cp4d_datasource_types.resources|json_query(query) }}"
            vars:
              db2_name: 'db2'
              query: "[?entity.name=='{{ db2_name }}'].metadata.asset_id"

          - debug:
              msg: "DB2 Datasource type asset_id: {{ cp4d_datasource_db2_type[0] }}"

          - name: Create Datasource connection json file
            template:
              src: cognos_connection.json.j2
              dest: "{{ cp4d_automation_temp_dir.path }}/cognos_connection.json"

          - name: Create Datasource connection {{ cp4d_cognos_connection_name }}
            shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X POST https://{{ cp4d_url.stdout }}/v2/connections?catalog_id={{ cp4d_catalog.catalogs[0].metadata.guid }} -T {{ cp4d_automation_temp_dir.path }}/cognos_connection.json"
            register: create_cognos_connection_result

          - debug:
              msg: "{{ create_cognos_connection_result }}"
        when: "cp4d_cognos_db2_content_repo|length == 0"

      - name: Create cognos instance json file
        template:
          src: cognos_instance.json.j2
          dest: "{{ cp4d_automation_temp_dir.path }}/cognos_instance.json"

      - name: Create Cognos instance
        shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X POST 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances' -T {{ cp4d_automation_temp_dir.path }}/cognos_instance.json"
        register: cognos_instance_create_result

      - debug:
          msg: "{{ cognos_instance_create_result }}"

      - set_fact:
          cognos_instance_create_result_json: "{{ cognos_instance_create_result.stdout | from_json }}"

      - name: Wait until Cognos Analytics artifacts pod has started and is ready
        command: oc get po -l chart=artifacts --no-headers -o=jsonpath='{.items[?(.status.containerStatuses[0].ready==true)].metadata.name}'
        register: ca_artifacts_pod
        retries: 60
        delay: 10
        until:
          - ca_artifacts_pod.rc==0
          - ca_artifacts_pod.stdout!=''

      - name: Wait for a bit so that all Cognos Analytics containers are starting
        pause:
         seconds: 90

      - name: Destroy the pod so Cognos Analytics instance provisioning continues
        shell: "oc delete pod -l chart=artifacts"

      - debug:
          msg: "Cognos Analytics instance building. ID: {{ cognos_instance_create_result_json.id }}. Provisioning can take up to 45 minutes to complete"


      #TODO Wait for CA to deploy

#Get instance configuration
- set_fact:
    cp4d_instance_config: "{{ all_config.cp4d_instance_configuration|json_query(query_instance) }}"
  vars:
    query_instance: "[?openshift_cluster_name=='{{ current_cp4d_cluster.openshift_cluster_name }}' && project=='{{ current_cp4d_cluster.project }}']"      

#Get CA cartridge configuration
- set_fact:
    cp4d_ca_instance: "{{ cp4d_instance_config.cartridges|json_query(query_ca_instance_manage_access) }}"
  vars:
    query_ca_instance_manage_access: "[?name=='ca']"   

- name: For each manage_access entry set the CA permission
  include_tasks: manage_ca_access.yml
  loop: "{{ cp4d_ca_instance.manage_access | default([])  }}"   
  loop_control:
    loop_var: current_manage_access    



