# tasks file for cp4d-cluster
- debug:
    msg: "Handling CP4D cartridge {{ current_cp4d_cartridge.name }} for CP4D cluster {{ current_cp4d_cluster.project }}"

- name: "Validate if cartridge is installed"
  script: check_cpd_service_installed.sh {{cp4d_cli_dir}} {{ current_cp4d_cluster.project }} {{ current_cp4d_cartridge.name  }}
  register: cp4d_cartridge_status_result

- name: Install Cloud Pak for Data Cartridge cartridge {{ current_cp4d_service['cp4d_service'] }} in project {{ current_cp4d_cluster.project }}
  block:

    - debug:
        msg: |
          "Installing Cloud Pak for Data service {{ current_cp4d_cartridge.name }}"
          "You can find the logs in {{status_dir}}/log/cp4d_{{ current_cp4d_cluster.openshift_cluster_name }}_{{ current_cp4d_cluster.project }}_{{ current_cp4d_cartridge.name }}.log"

    - name: Get key for ICR {{ current_cp4d_cluster.container_registry_namespace }} exists in the vault
      include_role: 
        name: vault-get-secret
      vars:
        secret_name: "icr_api_key_{{ current_cp4d_cluster.container_registry_namespace }}"
        secret_group: "icr-{{ current_cp4d_cluster.container_registry_namespace }}"   

    - name: Pre-load and transfer images of Cloud Pak for Data cartridge {{current_cp4d_cartridge.name}}
      shell: |
        {{ cp4d_cli_dir }}/cpd-cli preload-images \
          --assembly {{ current_cp4d_cartridge.name }} \
          --action transfer \
          --repo {{ cp4d_cli_dir }}/repo.yaml \
          --download-path {{ cp4d_cli_dir }}/cpd-cli-workspace \
          --transfer-image-to {{ ibm_cloud_cr_server }}/{{ current_cp4d_cluster.container_registry_namespace }} \
          --target-registry-username=iamapikey \
          --target-registry-password={{ secret_value }} \
          --accept-all-licenses | tee -a {{status_dir}}/log/cp4d_{{ current_cp4d_cluster.openshift_cluster_name }}_{{ current_cp4d_cluster.project }}_{{ current_cp4d_cartridge.name }}.log
      register: cpd_transfer_result
      retries: 3
      delay: 10
      until: cpd_transfer_result.rc==0

    - name: Prepare the OpenShift Project for deployment of the cartridge {{current_cp4d_cartridge.name}}
      shell: |
          runcpdadm () { \
            {{ cp4d_cli_dir }}/cpd-cli adm \
            --assembly {{ current_cp4d_cartridge.name }} \
            --namespace {{ current_cp4d_cluster.project }} \
            --repo {{ cp4d_cli_dir }}/repo.yaml \
            --download-path {{ cp4d_cli_dir }}/cpd-cli-workspace \
            --apply \
            --latest-dependency --accept-all-licenses |& \
            tee -a {{status_dir}}/log/cp4d_{{ current_cp4d_cluster.openshift_cluster_name }}_{{ current_cp4d_cluster.project }}_{{ current_cp4d_cartridge.name }}.log; \
            return "${PIPESTATUS[0]}"; }; \
          runcpdadm
      register: cpd_prepare_result
      retries: 3
      delay: 10
      until: cpd_prepare_result.rc==0

    - name: Install the Cloud Pak For Data cartridge {{current_cp4d_cartridge.name}}. (This task can take a long time)
      shell: |
          runcpdinstall () { \
            {{ cp4d_cli_dir }}/cpd-cli install \
            --assembly {{ current_cp4d_cartridge.name }} \
            --namespace {{ current_cp4d_cluster.project }} \
            --load-from {{ cp4d_cli_dir }}/cpd-cli-workspace \
            --storageclass {{ nfs_storage_class_name }} \
            --cluster-pull-prefix {{ ibm_cloud_cr_server }}/{{ current_cp4d_cluster.container_registry_namespace }} \
            --cluster-pull-username=iamapikey \
            --cluster-pull-password={{ secret_value }} \
            --accept-all-licenses \
            --latest-dependency |& \
            tee -a {{status_dir}}/log/cp4d_{{ current_cp4d_cluster.openshift_cluster_name }}_{{ current_cp4d_cluster.project }}_{{ current_cp4d_cartridge.name }}.log; \
            return "${PIPESTATUS[0]}"; }; \
          runcpdinstall
      register: cpd_install_result
      retries: 3
      delay: 10
      until: cpd_install_result.rc==0

  when: cp4d_cartridge_status_result.stdout == 'absent'

- name: Configure CP4D admin password and store in vault
  include_tasks: configure-cpd-admin-password.yml
  when: cp4d_configure_cpd_admin == 0