---
# tasks file for provision_dv_instance
- when: "not cp4d_dv_provision_data_virtualization_instance == true"
  block:
    - name: "Skip provision Data Virtualization instance"
      debug:
        msg: "Variable cp4d_dv_provision_instance set to {{ cp4d_dv_provision_data_virtualization_instance }}, ending play provision_dv_instance"

- when: "cp4d_dv_provision_data_virtualization_instance == true"
  block:

  - name: "Validate if cartridge {{ current_cp4d_cartridge.name }} is installed"
    shell: "./cpd-cli status -n {{ current_cp4d_cluster.project }} -a {{ current_cp4d_cartridge.name }}  --load-from {{ cp4d_cli_dir }}/cpd-cli-workspace"
    args:
      chdir: "{{ {{ cp4d_cli_dir }} }}"

  - name: Get Route to Cloud Pak for Data
    shell: "oc --namespace {{ current_cp4d_cluster.project }} get route {{ current_cp4d_cluster.project }}-cpd -o jsonpath=\"{.spec.host}\""
    register: cp4d_url

  - name: Login to Cloud Pak for Data
    shell: "curl -k -X POST -H 'cache-control: no-cache' -H 'Content-Type: application/json;charset=UTF-8' -d '{\"username\":\"{{ cp4d_login_username }}\",\"password\":\"{{ cp4d_login_password }}\"}' 'https://{{ cp4d_url.stdout }}/icp4d-api/v1/authorize'"
    register: cp4d_login_result

  - set_fact:
      cp4d_login: "{{ cp4d_login_result.stdout | from_json }}"

  - name: check if Data Virtualization is installed
    shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances?addon_type={{ cp4d_dv_type }}&addon_version={{ cp4d_dv_version }}'"
    register: dv_lookup_result

  - set_fact:
      dv_lookup: "{{ dv_lookup_result.stdout | from_json }}"

  - debug:
      msg: "Data Virtualization instance already exists in OpenShift project {{ current_cp4d_cluster.project }}, ending play provision_dv_instance"
    when: "not dv_lookup.total_count  == 0"

  - name: Create Data virtualization instance
    block:

      - tempfile:
          state: directory
        register: cp4d_automation_temp_dir

      - name: Create Data Virtualization configuration file
        template:
          src: dv_instance.json.j2
          dest: "{{ cp4d_automation_temp_dir.path }}/dv_instance.json"

      - name: Provision Data Virtualization
        shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X POST 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances' -T {{ cp4d_automation_temp_dir.path }}/dv_instance.json"
        register: provision_dv_result

      - debug:
          msg: "{{ provision_dv_result }}"

    when: dv_lookup.total_count == 0
