---
- name: Validate mandatory variables for mirroring images are defined
  assert:
    that:
      - ibm_cp_entitlement_key is defined
      - _p_target_registry_hostname is defined
      - _p_target_registry_credentials_secret is defined
      - _p_case_dir is defined

- name: Ensure {{ status_dir }}/cloud-pak exists
  file:
    path: "{{ status_dir }}/cloud-pak"
    state: directory

- name: Get target registry authentication details
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "{{ _p_target_registry_credentials_secret }}"
    secret_group: "{{ environment_name }}"

- name: Fail if the credentials for the target image registry have not been found in the vault
  fail:
    msg: "Secret with credentials for target image registry ({{ _p_target_registry_credentials_secret }}) have not been found in the vault."
  when: 
  - secret_value == ""

- set_fact:
    _registry_hostname: "{{ _p_target_registry_hostname }}"
    _registry_port: "{{ _p_target_registry_port | default('') }}"
    _registry_namespace: "{{ _p_target_registry_namespace | default('') }}"

- set_fact:
    _target_registry_auth: "{{ secret_value }}"
    _target_registry_url: "{{ lookup('template','get_private_registry.j2') }}"
    _private_registry_url_namespace: "{{ lookup('template','get_private_registry_with_namespace.j2') }}"

- set_fact:
    _entitled_auth: "{{ _v_entitled_registry_username }}:{{ ibm_cp_entitlement_key }}"

- name: Generate "{{ status_dir }}/cloud-pak/auth.json"
  template:
    src: auth.json.j2
    dest: "{{ status_dir }}/cloud-pak/auth.json"

- name: Mirror images for all files in {{ config_dir }}/case. Check status in {{ status_dir }}/log/cloud-pak-mirror-images.log
  shell: |
    run_mirror_images() {
      {{ role_path }}/scripts/cloud-pak-mirror-images.sh image mirror --dir {{ _p_case_dir }} \
        --to-registry "{{ _private_registry_url_namespace }}" \
        --auth {{ status_dir }}/cloud-pak/auth.json |& \
        tee -a {{ status_dir }}/log/cloud-pak-mirror-images.log; \
        return "${PIPESTATUS[0]}"; }; \
    run_mirror_images
  register: _mirror_images_result
  retries: 10
  delay: 5
  until: _mirror_images_result.rc==0
