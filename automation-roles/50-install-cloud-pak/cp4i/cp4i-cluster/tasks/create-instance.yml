---

# We create all instance types except platform-navigator which is
# created in a separate step


- name: Create instance
  block:

  - debug:
      msg: "### Creating instance of {{ current_cp4i_instance.type }} "  

  # ---------- FIND INSTANCE TYPE DEFINITION --------------

  - name: Get instance type details
    set_fact:
      _inst_type_def: "{{ instance_types | json_query(query) | first | default({}) }}"
    vars:
      query: >-
        [?type=='{{ current_cp4i_instance.type }}']

  - name: Fail if the instance type cannot be found
    fail:
      msg: "Case instance type for instance {{ current_cp4i_instance.name }} not found."
    when: _inst_type_def=={}

  # ---------- DETERMINE SUBSCRIPTION NAME ---------------- 

  # Top level operators are not used anymore

  # - set_fact:
  #     _subscription_name: "{{ _inst_type_def.package_name }}-{{current_cp4i_instance.channel}}-{{ _inst_type_def.source_catalog_online}}-openshift-marketplace"
  #   when: _use_top_level_operator

  - set_fact:
      _subscription_name: "{{ _inst_type_def.package_name }}"
  # when: not _use_top_level_operator

  - debug:
      msg: "Subscription name: {{ _subscription_name }}"
    

  # ---------- WAIT FOR SUBSCRIPTION ----------------------

  - name: Wait for the {{ _subscription_name }} subscription
    shell: |
      csv=$(oc get subscription -n openshift-operators {{ _subscription_name }} -o json | jq -r .status.currentCSV)
      if [[ "$csv" == "null" ]]; then
        echo "null"
      else
        oc get csv -n openshift-operators ${csv} -o json 2>/dev/null | jq -r .status.phase
      fi
    register: pn_phase
    retries: 100
    delay: 20
    until: pn_phase.stdout == "Succeeded"

  # ---------- CREATE INSTANCE ----------------------------

  # - name: Check if the {{current_cp4i_instance.type}} {{current_cp4i_instance.name}} already exists
  #   shell: |
  #     oc get {{_inst_type_def.kind}} {{current_cp4i_instance.name}} -n {{current_cp4i_cluster.project}} | grep -i '^{{current_cp4i_instance.name}}' | wc -l
  #   register: instance_exists  

  # - set_fact:
  #     instance_template: "{{ current_cp4i_instance.template | default(default_template_name) }}"
  #   vars:
  #     default_template_name: "{{ _inst_type_def.default_template }}"

  # - name: Prepare yaml file for creating instance
  #   template:
  #     src: "{{instance_template}}.j2"
  #     dest: "{{ status_dir }}/cp4i/{{current_cp4i_instance.type}}-{{current_cp4i_instance.name}}.yml"
  #   when: instance_exists.stdout == "0"

  # - name: Create instance from {{ status_dir }}/cp4i/{{current_cp4i_instance.type}}-{{current_cp4i_instance.name}}.yml
  #   shell: |
  #     oc apply -f {{ status_dir }}/cp4i/{{current_cp4i_instance.type}}-{{current_cp4i_instance.name}}.yml
  #   when: instance_exists.stdout == "0"

  when: (current_cp4i_instance.state | default('installed')) == 'installed'


