---
- name: Create Cloud Pak for Data directory for generated files
  file:
    path: "{{ status_dir }}/cp4d"
    state: directory

- name: Include variables for Cloud Pak for Data
  include_vars: vars-cp4d-installation.yml

- debug:
    var: implemented_cloud_platform_types

- set_fact:
    _cartridges_with_olm_utils_name: []
    _cartridges_to_install: []
    _cartridge_dependencies: []
    _upgrade_cp4d: False

- name: Retrieve previous configuration from the vault
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "{{ environment_name }}-all-config"
    secret_group: "{{ environment_name }}"
    _p_secret_variable: _previous_all_config

- name: Get cp4d object from previous configuration
  set_fact:
    _previous_cp4d: "{{ _previous_all_config.cp4d | default([]) | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?project=='{{ _p_current_cp4d_cluster.project }}']
  
- name: Retrieve current Ibmcpd CR from OpenShift project {{ _p_current_cp4d_cluster.project }}
  shell: |
    oc get Ibmcpd -n {{ _p_current_cp4d_cluster.project }} ibmcpd-cr
  failed_when: False
  register: _get_ibmcpd

- name: Determine if CP4D must be upgraded
  set_fact:
    _upgrade_cp4d: True
  when:
  - _get_ibmcpd.rc==0
  - (_previous_cp4d.cp4d_version | default('')) != ''
  - _previous_cp4d.cp4d_version != _p_current_cp4d_cluster.cp4d_version

- name: Show if upgrade of CP4D in project {{ _p_current_cp4d_cluster.project }} must be done
  debug:
    var: _upgrade_cp4d

- name: Obtain versions of case files and cartridges
  include_tasks: list-components-olm-utils.yml
  when: _list_components_json is not defined

- name: Get cartridges with CR details
  set_fact:
    _cartridges_with_olm_utils_name: >-
      {{ _cartridges_with_olm_utils_name | default([]) 
        + [ item | combine(_cartridge_cr_item) | combine(_cartridge_olm_utils_item) ]
      }}
  vars:
    _cartridge_cr_item: >-
          {{ cartridge_cr
            | selectattr('name','equalto',item['name'])
            | list
            | first
            | default([])
          }}
    _cartridge_olm_utils_item: >-
          {{ cartridge_cr
            | selectattr('olm_utils_name','equalto',item['name'])
            | list
            | first
            | default([])
          }}
  loop: "{{ _p_current_cp4d_cluster.cartridges }}"

- name: Add versions details from olm-utils
  set_fact:
    _cartridges_to_install: >-
      {{ _cartridges_to_install | default([]) 
        + [ item | combine(_list_components_json_item) ]
      }}
  vars:
    _list_components_json_item: >-
          {{ _list_components_json.list
            | selectattr('Component_name','equalto',item['olm_utils_name'])
            | list
            | first
            | default([])
          }}
  loop: "{{ _cartridges_with_olm_utils_name }}"

- set_fact:
    _dp_cartridge: >-
      {{ _cartridges_to_install | selectattr('Component_name','match','dp') | default({}) }}

- debug:
    var: _dp_cartridge

- set_fact:
    _tmp_cartridges: "{{ _cartridges_to_install | rejectattr('Component_name','match','dp') }}"

- set_fact:
    _cartridges_to_install: >-
      {{ _tmp_cartridges + _dp_cartridge }}

- set_fact:
    _sequential_install: "{{ _p_current_cp4d_cluster.sequential_install | default(True) | bool }}"

- name: Force sequential install if CP4D must be upgraded
  set_fact:
    _sequential_install: "{{ _sequential_install or _upgrade_cp4d }}"

- name: Determine if CP4D services must be installed sequentially
  set_fact:
    _sequential_install: "{{ _sequential_install or item.force_sequential_install }}"
  when: (item.state | default('installed')) == 'installed'
  loop: "{{ _cartridges_to_install }}"

- name: Show if sequential install is done
  debug:
    var: _sequential_install

- name: Determine cartridge dependencies
  set_fact:
    _cartridge_dependencies: >-
      {{ _cartridge_dependencies + ( item.Dependencies.split('+') | map("trim") | list | reject('match','^$') | list ) | unique }}
  when: (item.state | default('installed')) == 'installed'
  loop: "{{ _cartridges_to_install }}"

- name: Remove duplicate entries from cartridge dependencies
  set_fact:
    _cartridge_dependencies: >-
      {{ _cartridge_dependencies | unique }}

- name: Show full cartridge information
  debug:
    var: _cartridges_to_install


- name: Show cartridge dependencies
  debug:
    var: _cartridge_dependencies