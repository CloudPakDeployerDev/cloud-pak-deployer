---
- name: Ensure that OLM utils work directory exists
  file:
    path: /tmp/work
    state: directory

- name: Generate preview script to create cartridge subscriptions
  set_fact:
    _apply_olm_command_script: "{{ lookup('template', 'apply-olm-cartridge-sub.j2') }}" 
  vars:
    _p_preview_script: True

# - name: Show apply-olm command to create cartridge subscriptions
#   debug:
#     var: _apply_olm_command_script

- name: Generate preview script to install cartridge subscriptions, logs are in {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.log
  shell: |
    {{ _apply_olm_command_script }} > {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.log 2>&1

- name: Copy script to {{ status_dir }}/cp4d/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.sh
  copy:
    src: "/tmp/work/preview.sh"
    dest: "{{ status_dir }}/cp4d/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.sh"
    remote_src: True
    mode: u+rwx

- name: Generate OLM utils command to create cartridge subscriptions
  set_fact:
    _apply_olm_command: "{{ lookup('template', 'apply-olm-cartridge-sub.j2') }}" 
  vars:
    _p_preview_script: False

- name: Show apply-olm command to create cartridge subscriptions
  debug:
    var: _apply_olm_command

- name: Run apply-olm command to install cartridge subscriptions, logs are in {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.log
  shell: |
    {{ _apply_olm_command }} > {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.log 2>&1
  failed_when: False
  register: _apply_olm_result

# - name: Run shell script to create cartridge subscriptions, logs are in {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.log
#   shell: |
#     {{ status_dir }}/cp4d/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.sh >> {{ status_dir }}/log/{{ _p_current_cp4d_cluster.project }}-apply-olm-cartridge-sub.log 2>&1
#   when: not _sequential_install

- name: Show subscriptions state if apply-olm failed
  block:
  - name: Retrieving state of all operators in project {{ foundational_services_project }}
    shell: |
      oc get sub -n {{ foundational_services_project }} \
        --no-headers \
        -o jsonpath='{range .items[*]}{.metadata.name}{","}{.metadata.creationTimestamp}{","}{.status.installedCSV}{","}{.status.state}{"\n"}{end}' 
    register: _subscription_state
  - fail:
      msg: "{{ _subscription_state.stdout_lines }}"
  when: _apply_olm_result.rc != 0