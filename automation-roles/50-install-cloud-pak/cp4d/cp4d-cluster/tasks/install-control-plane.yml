---
# Check if the scheduler must be installed
- set_fact:
    _scheduler: "{{ current_cp4d_cluster.cartridges | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='scheduler']

- name: Install scheduling service
  block:
  - name: Prepare yaml file for scheduling service
    template:
    src: scheduler-cr.j2
    dest: "{{ status_dir }}/cp4d/scheduler-{{ foundational_services_project }}.yml"

  - name: Create scheduling service
    command: |
      oc apply -f "{{ status_dir }}/cp4d/scheduler-{{ foundational_services_project }}.yml"
  when: _scheduler != {} and (scheduler.state | default('installed')) == 'installed'

# Create OperandRequest
- name: Prepare yaml file for platform operator OperandRequest
  template:
    src: cpd-platform-operandrequest.j2
    dest: "{{ status_dir }}/cp4d/cpd-operator-operandrequest-{{ current_cp4d_cluster.project }}.yml"

- name: Create OperandRequest for the platform operator
  command: |
    oc apply -f "{{ status_dir }}/cp4d/cpd-operator-operandrequest-{{ current_cp4d_cluster.project }}.yml"

# Install Ibmcpd --> Move this to cartridges
- name: Prepare yaml file for Ibmcpd CR
  template:
    src: ibmcpd.j2
    dest: "{{ status_dir }}/cp4d/ibmcpd-{{ current_cp4d_cluster.project }}.yml"

- name: Create Ibmcpd CR
  command: |
    oc apply -f "{{ status_dir }}/cp4d/ibmcpd-{{ current_cp4d_cluster.project }}.yml"
  
# Wait for ZenService to be created (can take 10-15 minutes)
- name: Wait for ZenService to be completed
  shell: |
    oc get ZenService -n {{ current_cp4d_cluster.project }} lite-cr --output json | \
      jq -r '.status.zenStatus' | grep -i 'completed' | \
      wc -l
  register: deployed_zenservice
  retries: 60
  delay: 60
  until: deployed_zenservice.stdout == "1"
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
