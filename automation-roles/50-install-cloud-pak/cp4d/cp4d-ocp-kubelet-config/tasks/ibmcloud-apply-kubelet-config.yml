---
- name: Get first worker node
  shell: |
    oc get no --no-headers -l node-role.kubernetes.io/worker -o custom-columns='name:.metadata.name' | head -1
  register: ocp_workers

- name: Retrieve /etc/kubernetes/kubelet.conf
  shell: |
    oc debug no/{{ ocp_workers.stdout }} -- cat /host/etc/kubernetes/kubelet.conf > {{ cloud_pak_prepare_ocp_temp_dir.path }}/cp4d-kubelet.conf
  register: debug_node_result
  retries: 3
  delay: 10
  until: debug_node_result.rc==0

- name: Append allowedUnsafeSysctls to kubelet.conf
  blockinfile:
    path: "{{ cloud_pak_prepare_ocp_temp_dir.path }}/cp4d-kubelet.conf"
    block: |
      allowedUnsafeSysctls:
        - "kernel.msg*"
        - "kernel.shm*"
        - "kernel.sem"

- name: Create ConfigMap cp4d-kubelet-conf
  shell: |
    if ! oc get configmap -n kube-system cp4d-kubelet-conf;then
      oc create configmap -n kube-system cp4d-kubelet-conf \
        --from-file={{ cloud_pak_prepare_ocp_temp_dir.path }}/cp4d-kubelet.conf
    fi
- name: Set data for config map
  shell: |
    oc set data configmap/cp4d-kubelet-conf -n kube-system \
      --from-file={{ cloud_pak_prepare_ocp_temp_dir.path }}/cp4d-kubelet.conf
- name: Generate DaemonSet to set Kubelet configuration for all nodes
  template:
    src: cp4d-kubelet-conf-ds.j2
    dest: "{{ cloud_pak_prepare_ocp_temp_dir.path }}/cp4d-kubelet-conf-ds.yaml"
- name: Create or replace DaemonSet cp4d-kubelet-conf-ds
  shell: |
    if oc get ds -n kube-system cp4d-kubelet-conf-ds;then
      oc delete ds -n kube-system cp4d-kubelet-conf-ds
    fi
    oc apply -f {{ cloud_pak_prepare_ocp_temp_dir.path }}/cp4d-kubelet-conf-ds.yaml
