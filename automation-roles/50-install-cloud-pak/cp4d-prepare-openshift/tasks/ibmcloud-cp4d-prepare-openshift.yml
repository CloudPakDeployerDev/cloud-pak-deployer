---

- name: Make a temporary work folder available
  tempfile:
    state: directory
  register: cp4d_automation_temp_dir

- name: Login to the OpenShift cluster
  include_role:
    name: ibmcloud-login-roks-ocp
  vars: 
    roks_name: "{{ current_cp4d_cluster.openshift_cluster_name }}"

- set_fact:
    reload_workers: False

- name: Create private registries configuration (ImageContentSourcePolicy) for CP4D 4.0 with private registry
  block:
    - name: Check if ConfigMap cp4d-icsp-registries exists
      shell: "oc get configmap -n kube-system | grep -i '^cp4d-icsp-registries' | wc -l"
      register: oc_icsp_cm_exists
    - name: Create ConfigMap if it doesn't exist
      block:      
        - name: Create private registries configuration
          template:
            src: cp4d-icsp-registries-conf.j2
            dest: "{{ cp4d_automation_temp_dir.path }}/cp4d-icsp-registries.conf"
        - name: Create ConfigMap cp4d-icsp-registries
          shell: |
            oc create configmap -n kube-system cp4d-icsp-registries \
              --from-file={{ cp4d_automation_temp_dir.path }}/cp4d-icsp-registries.conf
        - debug:
            msg: "TODO: Create DaemonSet to apply the configuration"
        - set_fact:
            reload_workers: True
      when: 
      - (current_cp4d_cluster.cp4d_version | default('3.5') | string ) != '3.5'
      - oc_icsp_cm_exists.stdout == "0"
  when: not (use_entitled_registry | bool)

- name: Set global pull secret for private registry
  block:
    - name: Validate IBM Container Registry Pull secret key exists
      include_role: 
        name: connect-container-registry

    - name: Get key for ICR {{ current_cp4d_cluster.container_registry_namespace }} exists in the vault
      include_role: 
        name: vault-get-secret
      vars:
        secret_name: "icr_api_key_{{ current_cp4d_cluster.container_registry_namespace }}"
        secret_group: "{{ environment_name }}"  

    - name: Validate ICR secret is available
      fail: msg="ICR key icr_api_key_{{ current_cp4d_cluster.container_registry_namespace }} value from group {{ environment_name }} is empty"
      when: secret_value== ""

    - name: Check if DaemonSet cp4d-pull-secret-private exists
      shell: "oc get daemonset -n kube-system | grep -i '^cp4d-pull-secret-private' | wc -l"
      register: oc_pull_secret_ds

    - name: Set global pull secret for private registry for Cloud Pak for Data
      block:
        - name: Create temporary directory to hold current pull secret content
          tempfile:
            state: directory
          register: pull_secret_dir
        - name: Extract the global pull secret
          shell: |
            oc extract secret/pull-secret -n openshift-config --confirm --to={{ pull_secret_dir.path }}
        - name: Set the global pull secret
          shell: |
            cat {{ pull_secret_dir.path }}/.dockerconfigjson | \
              jq --arg private_registry "{{ ibm_cloud_cr_server }}" \
                --arg pull_secret $(echo -n "iamapikey:{{ secret_value }}" | base64 -w0) \
                '.auths += {($private_registry): {"auth": $pull_secret, "email": "not-used"}}' \
                > {{ pull_secret_dir.path }}/newdockerconfigjson
            oc set data secret/pull-secret -n openshift-config \
              --from-file=.dockerconfigjson={{ pull_secret_dir.path }}/newdockerconfigjson
        - name: Create DaemonSet to set the current pull secret
          template:
            src: cp4d-pull-secret-private.j2
            dest: "{{ cp4d_automation_temp_dir.path }}/cp4d-pull-secret-private.yaml"
        - name: Create DaemonSet cp4d-pull-secret-private
          shell: "oc apply -f {{ cp4d_automation_temp_dir.path }}/cp4d-pull-secret-private.yaml"
        - set_fact:
           reload_workers: True
      when: 
      - oc_pull_secret_ds.stdout == "0"

  when: not (use_entitled_registry | bool)

- name: Set global pull secret for entitled registry
  block:

    - name: Check if DaemonSet cp4d-pull-secret-entitled exists
      shell: "oc get daemonset -n kube-system | grep -i '^cp4d-pull-secret-entitled' | wc -l"
      register: oc_pull_secret_ds

    - name: Set global pull secret for entitled registry for Cloud Pak for Data
      block:
        - name: Create temporary directory to hold current pull secret content
          tempfile:
            state: directory
          register: pull_secret_dir
        - name: Extract the global pull secret
          shell: |
            oc extract secret/pull-secret -n openshift-config --confirm --to={{ pull_secret_dir.path }}
        - name: Set the global pull secret
          shell: |
            cat {{ pull_secret_dir.path }}/.dockerconfigjson | \
              jq --arg registry "{{ entitled_registry }}" \
                --arg pull_secret $(echo -n "cp:{{ ibm_cp_entitlement_key }}" | base64 -w0) \
                '.auths += {($registry): {"auth": $pull_secret, "email": "not-used"}}' \
                > {{ pull_secret_dir.path }}/newdockerconfigjson
            oc set data secret/pull-secret -n openshift-config \
              --from-file=.dockerconfigjson={{ pull_secret_dir.path }}/newdockerconfigjson
        - name: Create DaemonSet to set the current pull secret
          template:
            src: cp4d-pull-secret-entitled.j2
            dest: "{{ cp4d_automation_temp_dir.path }}/cp4d-pull-secret-entitled.yaml"
        - name: Create DaemonSet cp4d-pull-secret-entitled
          shell: "oc apply -f {{ cp4d_automation_temp_dir.path }}/cp4d-pull-secret-entitled.yaml"
        - set_fact:
           reload_workers: True
      when: 
      - oc_pull_secret_ds.stdout == "0"

  when: (use_entitled_registry | bool)

- name: Check if DaemonSet cp4d-kernel-parms exists
  shell: "oc get daemonset -n kube-system | grep -i '^cp4d-kernel-parms' | wc -l"
  register: oc_tuned_ds_exists

- name: Set kernel parameters
  block:
    - name: Generate kernel parameters DaemonSet
      template:
        src: cp4d-kernel-parms.j2
        dest: "{{ cp4d_automation_temp_dir.path }}/cp4d-kernel-parms.yaml"
    - name: Create kernel parameters DaemonSet
      shell: "oc apply -f {{ cp4d_automation_temp_dir.path }}/cp4d-kernel-parms.yaml"
    - set_fact:
        reload_workers: True
  when: oc_tuned_ds_exists.stdout == "0"

# On ROKS, the KubeletConfig is not respected, however we can use the existence
# of the KubeletConfig object to determins if the workers must be reloaded
# TODO: Replace with smarter logic to determine when nodes must be reloaded
- name: Check if the KubeletConfig {{ kubelet_config_name }} exists
  shell: "oc get KubeletConfig | grep -i '^{{ kubelet_config_name }}' | wc -l"
  register: oc_kubeletconfig_exists

- name: Configure KubeletConfig {{ kubelet_config_name }}
  block:
    - name: Create KubeletConfig yaml
      template:
        src: cp4d-kubeletconfig.j2
        dest: "{{ cp4d_automation_temp_dir.path }}/cp4d-kubeletconfig.yaml"
    - name: Create KubeletConfig {{ kubelet_config_name }}
      shell: "oc apply -f {{ cp4d_automation_temp_dir.path }}/cp4d-kubeletconfig.yaml"
    - name: Generate Kubelet config DaemonSet
      template:
        src: cp4d-kubeletconfig-ds.j2
        dest: "{{ cp4d_automation_temp_dir.path }}/cp4d-kubeletconfig-ds.yaml"
    - name: Create Kubelet config DaemonSet
      shell: "oc apply -f {{ cp4d_automation_temp_dir.path }}/cp4d-kubeletconfig-ds.yaml"    
    - set_fact:
        reload_workers: True
  when: oc_kubeletconfig_exists.stdout == "0"

# TODO: Should we process other worker pools too? Probably all workers pools except OCS should be replaced.
- name: Get the worker nodes for the default worker pool
  command: |
    ibmcloud oc workers --cluster {{ current_cp4d_cluster.openshift_cluster_name }} \
      --worker-pool default --output json
  register: default_workers
  when: reload_workers

# TODO: Remove debug
- name: Show workers from default worker pool
  debug:
    var: default_workers
  when: reload_workers

- name: Get worker names
  set_fact:
    worker_ids: "{{ default_workers.stdout | from_json | json_query(get_ids) | list }}"
  vars:
    get_ids: "[*].id"
  when: reload_workers

- name: Reboot the workers for cluster {{ current_cp4d_cluster.openshift_cluster_name }}
  command: |
    ibmcloud oc worker reboot --cluster {{ current_cp4d_cluster.openshift_cluster_name }} --worker {{ worker_item }} -f 
  loop: "{{ worker_ids }}"
  loop_control:
    loop_var: worker_item
  when: reload_workers

- set_fact:
    number_of_workers: "{{ worker_ids | length }}"
  when: reload_workers

- name: Wait for 3 minutes to allow workers to start rebooting
  pause:
    minutes: 3
  when: reload_workers

- name: Wait for all workers for cluster {{ current_cp4d_cluster.openshift_cluster_name }} to become ready
  shell: |
    oc get no --no-headers | grep -v ' Ready' | wc -l 
  register: unready_workers
  retries: 120
  delay: 60
  until: unready_workers.stdout == "0"
  when: reload_workers

