---
- name: Get current storage class
  debug:
    var: current_openshift_storage

- set_fact:
    _vsphere_config: "{{ all_config.vsphere | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ current_openshift_cluster.vsphere_name }}']

- debug:
    var: _vsphere_config

- name: Check if OcsCluster {{ current_openshift_storage.ocs_storage_label }} already exists
  command: |
    oc get OcsCluster {{ current_openshift_storage.ocs_storage_label }} 
  failed_when: False
  register: ocs_cluster_exists

# If OcsCluster does not exist yet, create machine set, install OCS and create OcsCluster
- block:

  - name: Retrieve infrastructure ID
    shell: |
      oc get -o jsonpath='{.status.infrastructureName}{"\n"}' infrastructure cluster
    register: _get_infrastructure_id

  - set_fact:
      _infrastructure_id: "{{ _get_infrastructure_id.stdout }}"

  - name: Create temporary file for the MachineSet object
    tempfile:
      path: "{{status_dir}}/openshift"
      state: file
    register: machineset_tempfile

  - name: Generate MachineSet file {{ ocscluster_tempfile.path }}
    template:
      src: vsphere-ocs-machineset.j2
      dest: "{{ machineset_tempfile.path }}"

  - name: Create or update machine set
    shell:
      oc apply -f {{ machineset_tempfile.path }}

  - name: Get number of workers in machine set
    shell: |
      oc get machineset -n openshift-machine-api \
        {{ _infrastructure_id }}-{{ current_openshift_storage.ocs_storage_label }} \
        -o jsonpath='{.status.replicas}'
    register: _machineset_replicas

  - name: Wait for {{ _machineset_replicas.stdout }} machines to be added to the cluster and become available
    shell: |
      oc get machineset -n openshift-machine-api \
        {{ _infrastructure_id }}-{{ current_openshift_storage.ocs_storage_label }} \
        -o jsonpath='{.status.availableReplicas}'
    register: _available_replicas
    retries: 120
    delay: 60
    until: _available_replicas.stdout == _machineset_replicas.stdout
    vars:
      ansible_callback_diy_runner_retry_msg: >-
        {%- set result = ansible_callback_diy.result.output -%}
        {%- set retries_left = result.retries - result.attempts -%}
        Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
