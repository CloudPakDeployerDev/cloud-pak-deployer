---
- name: Get current storage class
  debug:
    var: current_storage_class

- name: Check if openshift-container-storage add-on is installed
  command: |
    ibmcloud oc cluster addon get --addon openshift-container-storage --cluster {{ current_roks_cluster.name }} --output json
  register: ocs_check_addon
  failed_when: False

# TODO: Remove debug
- debug:
    var: ocs_check_addon

- name: Enable openshift-container-storage add-on for ROKS cluster {{ current_roks_cluster.name }}
  command: |
    ibmcloud oc cluster addon enable openshift-container-storage \
      --cluster {{ current_roks_cluster.name }} \
      --version {{ roks_ocs_addon_version }} -f
  when: ocs_check_addon.rc != 0

- name: Wait until openshift-container-storage add-on is ready
  command: |
    ibmcloud oc cluster addon get --addon openshift-container-storage --cluster {{ current_roks_cluster.name }} --output json
  register: ocs_get_addon
  failed_when: False
  retries: 60
  delay: 30
  until: ((ocs_get_addon.stdout | from_json).healthState | default("")) == "normal"

- name: Get the worker nodes for the OCS storage class
  command: |
    ibmcloud oc workers --cluster {{ current_roks_cluster.name }} \
      --worker-pool {{ current_roks_cluster.name }}-{{ current_storage_class.ocs_storage_label }} \
      --output json
  register: ocs_workers

# TODO: Remove debug
- name: Show OCS workers
  debug:
    var: ocs_workers

- name: Get worker IPs
  set_fact:
    worker_ips: "{{ ocs_workers.stdout | from_json | json_query(get_ips) | list }}"
  vars:
    get_ips: "[*].networkInterfaces[0].ipAddress"

- name: Label the OCS nodes as infra
  command: |
    oc label nodes {{ item }} node-role.kubernetes.io/infra="" --overwrite
  loop: "{{ worker_ips }}"

- name: Taint the OCS nodes so they will only run OCS workload
  command: |
    oc adm taint nodes {{ item }} node.ocs.openshift.io/storage="true":NoSchedule --overwrite
  loop: "{{ worker_ips }}"

- name: Check if OcsCluster {{ current_storage_class.ocs_storage_label }} already exists
  command: |
    oc get OcsCluster {{ current_storage_class.ocs_storage_label }} 
  failed_when: False
  register: ocs_cluster_exists

- name: Create temporary file for the OcsCluster object
  tempfile:
    path: "{{status_dir}}/openshift"
    state: file
  register: ocscluster_tempfile
  when: ocs_cluster_exists.rc != 0

- name: "Generate OcsCluster file {{ ocscluster_tempfile.path }}"
  template:
    src: ocscluster.j2
    dest: "{{ ocscluster_tempfile.path }}"
  when: ocs_cluster_exists.rc != 0

- name: Create OcsCluster {{ current_storage_class.ocs_storage_label }}
  command: |
    oc apply -f "{{ ocscluster_tempfile.path }}"
  when: ocs_cluster_exists.rc != 0

- name: Wait for OcsCluster {{ current_storage_class.ocs_storage_label }} to be deployed
  command: |
    oc get OcsCluster {{ current_storage_class.ocs_storage_label }} -o yaml
  register: ocscluster_status
  failed_when: False
  retries: 60
  delay: 30
  until: ((ocscluster_status.stdout | from_yaml).status.storageClusterStatus | default("")) == "Ready"

