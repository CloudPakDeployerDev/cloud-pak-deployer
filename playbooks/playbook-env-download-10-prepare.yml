---
- name: Prepare for air-gapped download
  hosts: localhost
  connection: local
  become: True
  gather_facts: False

  vars:
    ansible_callback_diy_runner_on_skipped_msg: ""
    ansible_callback_diy_runner_on_ok_msg: ""
    ansible_callback_diy_playbook_on_include_msg: ""

  tasks:
  - name: Download cloudctl client
    include_role:
      name: cloudctl-download

  - name: Download case file for the registry server
    shell: |
      cloudctl case save \
        --repo https://github.com/IBM/cloud-pak/raw/master/repo/case \
        --case ibm-cp-datacore \
        --version 2.0.10 \
        --outputdir {{ status_dir }}/downloads \
        --no-dependency

  - name: Validate if an existing portable registry credentials secret exists in the vault
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "portable-registry-credentials"
      secret_group: "{{ environment_name }}"

  - name: Save portable registry credentials retrieved from vault
    set_fact:
      _portable_registry_credentials: "{{ secret_value }}"

  # Generate portable registry credentials if non-existing
  - block:
    - name: Generate new password for portable registry admin user
      set_fact:
        _new_portable_registry_admin_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters') }}"

    - name: Store the portable registry credentials into the vault as portable-registry-credentials
      include_role:
        name: vault-set-secret
      vars:
        secret_name: "portable-registry-credentials"
        secret_description: "Portable registry credentials"
        secret_payload: "admin:{{ _new_portable_registry_admin_password }}"
        secret_group: "{{ environment_name }}"

    - set_fact:
        _portable_registry_credentials: "admin:{{ _new_portable_registry_admin_password }}"

    when: _portable_registry_credentials == ""

  - name: Prepare registry
    shell: |
      cloudctl case launch --case {{ status_dir }}/downloads/ibm-cp-datacore-2.0.10.tgz \
        --inventory cpdPlatformOperator --action init-registry \
        --args "--registry portable-registry --user $(echo '{{ _portable_registry_credentials }}' | cut -d: -f 1) --pass $(echo '{{ _portable_registry_credentials }}' | cut -d: -f 2) --dir {{ status_dir }}/imageregistry"
    args:
      creates: "{{ status_dir }}/imageregistry"

  - name: Show portable registry credentials
    debug:
      msg: "Portable registry credentials: {{ _portable_registry_credentials }}"